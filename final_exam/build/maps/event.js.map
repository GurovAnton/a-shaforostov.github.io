{"version":3,"names":[],"mappings":"","sources":["event.js"],"sourcesContent":["Event = (function() {\n\n  var guid = 0\n    \n  function fixEvent(event) {\n\tevent = event || window.event\n  \n    if ( event.isFixed ) {\n      return event\n    }\n    event.isFixed = true \n  \n    event.preventDefault = event.preventDefault || function(){this.returnValue = false}\n    event.stopPropagation = event.stopPropagaton || function(){this.cancelBubble = true}\n    \n    if (!event.target) {\n        event.target = event.srcElement\n    }\n  \n    if (!event.relatedTarget && event.fromElement) {\n        event.relatedTarget = event.fromElement == event.target ? event.toElement : event.fromElement;\n    }\n  \n    if ( event.pageX == null && event.clientX != null ) {\n        var html = document.documentElement, body = document.body;\n        event.pageX = event.clientX + (html && html.scrollLeft || body && body.scrollLeft || 0) - (html.clientLeft || 0);\n        event.pageY = event.clientY + (html && html.scrollTop || body && body.scrollTop || 0) - (html.clientTop || 0);\n    }\n  \n    if ( !event.which && event.button ) {\n        event.which = (event.button & 1 ? 1 : ( event.button & 2 ? 3 : ( event.button & 4 ? 2 : 0 ) ));\n    }\n\t\n\treturn event\n  }  \n  \n  /* Вызывается в контексте элемента всегда this = element */\n  function commonHandle(event) {\n    event = fixEvent(event)\n    \n    var handlers = this.events[event.type]\n\n\tfor ( var g in handlers ) {\n      var handler = handlers[g]\n\n      var ret = handler.call(this, event)\n      if ( ret === false ) {\n          event.preventDefault()\n          event.stopPropagation()\n      }\n    }\n  }\n  \n  return {\n    add: function(elem, type, handler) {\n      if (elem.setInterval && ( elem != window && !elem.frameElement ) ) {\n        elem = window;\n      }\n      \n      if (!handler.guid) {\n        handler.guid = ++guid\n      }\n      \n      if (!elem.events) {\n        elem.events = {}\n\t\telem.handle = function(event) {\n\t\t  if (typeof Event !== \"undefined\") {\n\t\t\treturn commonHandle.call(elem, event)\n\t\t  }\n        }\n      }\n\t  \n      if (!elem.events[type]) {\n        elem.events[type] = {}        \n      \n        if (elem.addEventListener)\n\t\t  elem.addEventListener(type, elem.handle, false)\n\t\telse if (elem.attachEvent)\n          elem.attachEvent(\"on\" + type, elem.handle)\n      }\n      \n      elem.events[type][handler.guid] = handler\n    },\n    \n    remove: function(elem, type, handler) {\n      var handlers = elem.events && elem.events[type]\n      \n      if (!handlers) return\n      \n      delete handlers[handler.guid]\n      \n      for(var any in handlers) return \n\t  if (elem.removeEventListener)\n\t\telem.removeEventListener(type, elem.handle, false)\n\t  else if (elem.detachEvent)\n\t\telem.detachEvent(\"on\" + type, elem.handle)\n\t\t\n\t  delete elem.events[type]\n\t\n\t  \n\t  for (var any in elem.events) return\n\t  try {\n\t    delete elem.handle\n\t    delete elem.events \n\t  } catch(e) { // IE\n\t    elem.removeAttribute(\"handle\")\n\t    elem.removeAttribute(\"events\")\n\t  }\n    } \n  }\n}())"],"file":"event.js","sourceRoot":"/source/"}